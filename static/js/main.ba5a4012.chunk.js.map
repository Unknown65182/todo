{"version":3,"sources":["components/TodoListItem.tsx","components/TodoList.tsx","components/AddTodoForm.tsx","App.tsx","index.tsx"],"names":["Label","styled","label","checked","TodoListItem","todo","toggleTodo","complete","type","onChange","text","TodoList","todos","map","index","key","AddTodoForm","addTodo","useState","setText","value","e","target","onClick","preventDefault","initialTodos","App","setTodos","selectedTodo","newTodos","newTodo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAKA,IAAMA,E,MAAQC,EAAOC,MAAV,KACU,qBAAGC,QAAyB,eAAiB,MAQrDC,EAAiC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WACrD,OACE,4BACE,kBAACN,EAAD,CAAOG,QAASE,EAAKE,UACnB,2BACEC,KAAK,WACLL,QAASE,EAAKE,SACdE,SAAU,kBAAMH,EAAWD,MAE5BA,EAAKK,QCbDC,EAA6B,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAON,EAAiB,EAAjBA,WAClD,OACE,4BACGM,GACCA,EAAMC,KAAI,SAACR,EAAMS,GAAP,OACR,kBAAC,EAAD,CACEC,IAAG,UAAKV,EAAKK,KAAV,YAAkBI,GACrBT,KAAMA,EACNC,WAAYA,SCVXU,EAAgC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACpCC,mBAAS,IAD2B,mBACrDR,EADqD,KAC/CS,EAD+C,KAE5D,OACE,8BACE,2BACEX,KAAK,OACLY,MAAOV,EACPD,SAAU,SAACY,GAAD,OAAOF,EAAQE,EAAEC,OAAOF,UAEpC,4BACEZ,KAAK,SACLe,QAAS,SAACF,GACRA,EAAEG,iBACFP,EAAQP,GACRS,EAAQ,MALZ,cCXAM,EAAuB,CAC3B,CACEf,KAAM,eACNH,UAAU,GAEZ,CACEG,KAAM,YACNH,UAAU,GAEZ,CACEG,KAAM,YACNH,UAAU,GAEZ,CACEG,KAAM,YACNH,UAAU,IA8BCmB,EA1BO,WAAO,IAAD,EACAR,mBAASO,GADT,mBACnBb,EADmB,KACZe,EADY,KAkB1B,OACE,oCACE,kBAAC,EAAD,CAAUf,MAAOA,EAAON,WAlBG,SAACsB,GAC9B,IAAMC,EAAWjB,EAAMC,KAAI,SAACR,GAC1B,OAAIA,IAASuB,EACJ,2BACFvB,GADL,IAEEE,UAAWF,EAAKE,WAGbF,KAETsB,EAASE,MASP,kBAAC,EAAD,CAAaZ,QAPQ,SAACP,GACxB,IAAMoB,EAAU,CAAEpB,KAAMA,EAAMH,UAAU,GACxCoB,EAAS,GAAD,mBAAKf,GAAL,CAAYkB,UCrCxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ba5a4012.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport { Todo, ToggleTodo } from '../types/index';\n\nconst Label = styled.label<{ checked: boolean }>`\n  text-decoration: ${({ checked }) => (checked ? 'line-through' : {})};\n`;\n\ninterface IProps {\n  todo: Todo;\n  toggleTodo: ToggleTodo;\n}\n\nexport const TodoListItem: React.FC<IProps> = ({ todo, toggleTodo }) => {\n  return (\n    <li>\n      <Label checked={todo.complete}>\n        <input\n          type=\"checkbox\"\n          checked={todo.complete}\n          onChange={() => toggleTodo(todo)}\n        />\n        {todo.text}\n      </Label>\n    </li>\n  );\n};\n","import React from 'react';\nimport { TodoListItem } from './TodoListItem';\n\nimport { Todo, ToggleTodo } from '../types/index';\n\ninterface IProps {\n  todos: Todo[];\n  toggleTodo: ToggleTodo;\n}\n\nexport const TodoList: React.FC<IProps> = ({ todos, toggleTodo }) => {\n  return (\n    <ul>\n      {todos &&\n        todos.map((todo, index) => (\n          <TodoListItem\n            key={`${todo.text}_${index}`}\n            todo={todo}\n            toggleTodo={toggleTodo}\n          />\n        ))}\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { AddTodo } from '../types/index';\n\ninterface IProps {\n  addTodo: AddTodo;\n}\n\nexport const AddTodoForm: React.FC<IProps> = ({ addTodo }) => {\n  const [text, setText] = useState('');\n  return (\n    <form>\n      <input\n        type=\"text\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button\n        type=\"submit\"\n        onClick={(e) => {\n          e.preventDefault();\n          addTodo(text);\n          setText('');\n        }}\n      >\n        Add Todo\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { AddTodoForm } from './components/AddTodoForm';\n\nimport { Todo, ToggleTodo, AddTodo } from './types/index';\n\nconst initialTodos: Todo[] = [\n  {\n    text: 'Walk the dog',\n    complete: false,\n  },\n  {\n    text: 'Write app',\n    complete: false,\n  },\n  {\n    text: 'Write app',\n    complete: false,\n  },\n  {\n    text: 'Write app',\n    complete: true,\n  },\n];\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState(initialTodos);\n  const toggleTodo: ToggleTodo = (selectedTodo: Todo) => {\n    const newTodos = todos.map((todo) => {\n      if (todo === selectedTodo) {\n        return {\n          ...todo,\n          complete: !todo.complete,\n        };\n      }\n      return todo;\n    });\n    setTodos(newTodos);\n  };\n  const addTodo: AddTodo = (text: string) => {\n    const newTodo = { text: text, complete: false };\n    setTodos([...todos, newTodo]);\n  };\n  return (\n    <>\n      <TodoList todos={todos} toggleTodo={toggleTodo} />\n      <AddTodoForm addTodo={addTodo} />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}